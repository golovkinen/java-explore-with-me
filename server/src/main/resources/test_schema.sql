drop table if exists users cascade;
drop table if exists categories cascade;
drop table if exists comments cascade;
drop table if exists events cascade;
drop table if exists compilations cascade;
drop table if exists locations cascade;
drop table if exists marks cascade;
drop table if exists event_ratings cascade;
drop table if exists user_ratings cascade;
drop table if exists subscriptions cascade;
drop table if exists requests cascade;
drop table if exists usefulness cascade;


create table if not exists users
(
    user_id            INTEGER GENERATED BY DEFAULT AS IDENTITY,
    user_name          CHARACTER VARYING(50)  not null,
    user_email         CHARACTER VARYING(200) not null,
    allow_subscription BOOLEAN                not null,
    constraint user_pk primary key (user_id),
    CONSTRAINT user_email_unique UNIQUE (user_email)
);

create table if not exists categories
(
    category_id   INTEGER GENERATED BY DEFAULT AS IDENTITY,
    category_name CHARACTER VARYING(200) not null,
    constraint category_pk primary key (category_id),
    CONSTRAINT category_name_unique UNIQUE (category_name)
);

create table if not exists locations
(
    location_id    INTEGER GENERATED BY DEFAULT AS IDENTITY,
    location_title CHARACTER VARYING(200),
    position       geometry(POINT, 4326) NOT NULL,
    location_lan   double precision      not null,
    location_lon   double precision      not null,
    country        CHARACTER VARYING(200),
    city           CHARACTER VARYING(200),
    suburb         CHARACTER VARYING(200),
    road           CHARACTER VARYING(200),
    house_number   CHARACTER VARYING(200),
    display_name   CHARACTER VARYING(500),

    constraint location_pk primary key (location_id)
);

create table if not exists compilations
(
    compilation_id         INTEGER GENERATED BY DEFAULT AS IDENTITY,
    compilation_title      CHARACTER VARYING(200) not null,
    compilation_created_on timestamp              not null,
    compilation_pinned     BOOLEAN                not null,
    constraint compilation_id primary key (compilation_id)
);

create table if not exists events
(
    event_id                 INTEGER GENERATED BY DEFAULT AS IDENTITY,
    event_annotation         CHARACTER VARYING(2000) not null,
    event_description        CHARACTER VARYING(7000) not null,
    event_title              CHARACTER VARYING(120)  not null,
    event_date               timestamp               not null,
    event_paid               BOOLEAN                 not null,
    event_available          BOOLEAN                 not null,
    event_created_on         timestamp               not null,
    event_published_on       timestamp,
    event_participant_limit  integer                 not null,
    event_request_moderation boolean                 not null,
    state                    CHARACTER VARYING       not null,
    event_views              integer                 not null,
    user_id                  INTEGER                 not null,
    category_id              INTEGER,
    location_id              INTEGER,
    compilation_id           integer,
    event_rating             double precision,
    constraint event_id primary key (event_id),
    CONSTRAINT event_category_fk FOREIGN key (category_id) REFERENCES categories on delete set null on update cascade,
    CONSTRAINT event_location_fk FOREIGN key (location_id) REFERENCES locations on delete set null on update cascade,
    CONSTRAINT event_compilation_fk FOREIGN key (compilation_id) REFERENCES compilations on delete set null,
    CONSTRAINT event_user_fk FOREIGN key (user_id) REFERENCES users ON DELETE CASCADE

);

create table if not exists requests
(
    request_id   INTEGER GENERATED BY DEFAULT AS IDENTITY,
    created_on   timestamp         not null,
    requester_id INTEGER           not null,
    event_id     INTEGER           not null,
    status       CHARACTER VARYING not null,

    constraint request_pk primary key (request_id),
    CONSTRAINT requester_fk FOREIGN key (requester_id) REFERENCES users ON DELETE CASCADE,
    CONSTRAINT event_fk FOREIGN key (event_id) REFERENCES events ON DELETE CASCADE
);

create table if not exists marks
(
    event_id        INTEGER   NOT NULL,
    user_id         INTEGER   NOT NULL,
    mark            INTEGER,
    mark_created_on timestamp not null,
    mark_updated    timestamp,

    CONSTRAINT marks_pk PRIMARY key (event_id, user_id),
    CONSTRAINT marks_event_id_fk FOREIGN key (event_id) REFERENCES events ON DELETE CASCADE,
    CONSTRAINT marks_user_id_fk FOREIGN key (user_id) REFERENCES users ON DELETE CASCADE
);

create table if not exists event_ratings
(
    event_id     INTEGER not null,
    event_rating DOUBLE PRECISION,
    constraint ratings_pk
        primary key (event_id),
    constraint ratings_event_fk
        foreign key (event_id) references events
            on delete cascade
);

create table if not exists user_ratings
(
    user_id     INTEGER not null,
    user_rating DOUBLE PRECISION,
    constraint user_ratings_pk
        primary key (user_id),
    constraint ratings_user_fk
        foreign key (user_id) references users
            on delete cascade
);

create table if not exists subscriptions
(
    user_id           INTEGER   NOT NULL,
    subscriber_id     INTEGER   NOT NULL,
    subscr_created_on timestamp not null,
    CONSTRAINT subscriptions_pk PRIMARY key (user_id, subscriber_id),
    CONSTRAINT subscriptions_user_fk FOREIGN key (user_id) REFERENCES users ON DELETE CASCADE,
    CONSTRAINT subscriptions_subscriber_fk FOREIGN key (subscriber_id) REFERENCES users ON DELETE CASCADE
);

create table if not exists comments
(
    comment_id         INTEGER GENERATED BY DEFAULT AS IDENTITY,
    comment_text       CHARACTER VARYING(2000) not null,
    created            timestamp               not null,
    state              CHARACTER VARYING       not null,
    comment_useful     INTEGER,
    comment_not_useful INTEGER,
    event_id           INTEGER                 not null,
    author_id          INTEGER                 not null,
    constraint comment_pk primary key (comment_id),
    CONSTRAINT event_comment_fk FOREIGN key (event_id) REFERENCES events ON DELETE CASCADE,
    CONSTRAINT event_author_fk FOREIGN key (author_id) REFERENCES users ON DELETE CASCADE
);

create table if not exists usefulness
(
    comment_id      INTEGER   NOT NULL,
    user_id         INTEGER   NOT NULL,
    useful          boolean,
    vote_created_on timestamp not null,
    vote_updated    timestamp,

    CONSTRAINT useful_pk PRIMARY key (comment_id, user_id),
    CONSTRAINT useful_comment_id_fk FOREIGN key (comment_id) REFERENCES comments ON DELETE CASCADE,
    CONSTRAINT useful_user_id_fk FOREIGN key (user_id) REFERENCES users ON DELETE CASCADE
);